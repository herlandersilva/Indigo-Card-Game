type: edu
files:
- name: src/indigo/Main.kt
  visible: true
  text: |-
    package indigo

    fun main() {
        println("Hello World!")
    }
  learner_created: false
- name: test/IndigoCardGameTest.kt
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram

    class ErrorData(val correct: Boolean, val errorMsg: String,
                    val topCard: String = "", val cardsList: List<String> = emptyList())

    class CardGameTest : StageTest<Any>() {

        @DynamicTest
        fun playFirstNormalExeTest3(): CheckResult {
            val deck = mutableListOf<String>()
            val cardsInHand = mutableListOf<String>()
            var pointsPlayer = 0
            var pointsComputer = 0
            var pointsOnTable = 0
            var numOfCardsPlayer = 0
            var numOfCardsComputer = 0
            var numOfCardsOnTable = 0
            var whoWon = 0

            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("yes").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            deck.addAll(validOutput.cardsList)
            var topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            numOfCardsOnTable = 4
            pointsOnTable = countPoints(validOutput.cardsList)
            repeat(4) {
                for (numOfCards in 6 downTo 1) {
                    validOutput = checkPlayerOutput2(outputString, numOfCards, numOfCardsOnTable, topCard)
                    if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    if (numOfCards == 6) {
                        cardsInHand.clear()
                        cardsInHand.addAll(validOutput.cardsList)
                        for (card in cardsInHand)
                            if ( deck.contains(card) )
                                return CheckResult(false, "Some cards in hand have already passed on table (Duplicates).")
                        deck.addAll(cardsInHand)
                    } else {
                        if ( !cardsInHand.containsAll(validOutput.cardsList) )
                            return CheckResult(false, "Cards in hand have changed since the last card was played.")
                    }
                    var hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.cardsList.first())
                        a.first == b.first || a.second == b.second
                    }
                    topCard = validOutput.cardsList.first()
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    cardsInHand.remove(topCard)
                    outputString = main.execute("1").trim()
                    if (hasWon) {
                        whoWon = 0
                        pointsPlayer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsPlayer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Player wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong player wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }

                    validOutput = checkComputerOutput2(outputString, numOfCardsOnTable, topCard)
                    if (!validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.topCard)
                        (a.first == b.first) || (a.second == b.second)
                    }
                    topCard = validOutput.topCard
                    if ( deck.contains(topCard) )
                        return CheckResult(false, "Computer played card is a duplicate.")
                    deck.add(topCard)
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    outputString = outputString.substringAfter(topCard).trim()
                    if (hasWon) {
                        whoWon = 1
                        pointsComputer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsComputer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Computer wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong computer wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }
                }
            }

            position = if (numOfCardsOnTable == 0) checkOutput(outputString.lowercase(), 0, "No cards on the table".lowercase())
            else checkOutput(outputString.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output for number of cards or the top card.")
            if (whoWon == 0) {
                pointsPlayer += pointsOnTable
                numOfCardsPlayer += numOfCardsOnTable
            } else {
                pointsComputer += pointsOnTable
                numOfCardsComputer += numOfCardsOnTable
            }
            if (numOfCardsPlayer >= numOfCardsComputer) pointsPlayer += 3
            else pointsComputer += 3
            position = checkOutput(outputString.lowercase(), position,
                "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase(),
                "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun playFirstNormalExeTest4(): CheckResult {
            val deck = mutableListOf<String>()
            val cardsInHand = mutableListOf<String>()
            var pointsPlayer = 0
            var pointsComputer = 0
            var pointsOnTable = 0
            var numOfCardsPlayer = 0
            var numOfCardsComputer = 0
            var numOfCardsOnTable = 0
            var whoWon = 0

            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("yes").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            deck.addAll(validOutput.cardsList)
            var topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            numOfCardsOnTable = 4
            pointsOnTable = countPoints(validOutput.cardsList)
            repeat(4) {
                for (numOfCards in 6 downTo 1) {
                    validOutput = checkPlayerOutput2(outputString, numOfCards, numOfCardsOnTable, topCard)
                    if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    if (numOfCards == 6) {
                        cardsInHand.clear()
                        cardsInHand.addAll(validOutput.cardsList)
                        for (card in cardsInHand)
                            if ( deck.contains(card) )
                                return CheckResult(false, "Some cards in hand have already passed on table (Duplicates).")
                        deck.addAll(cardsInHand)
                    } else {
                        if ( !cardsInHand.containsAll(validOutput.cardsList) )
                            return CheckResult(false, "Cards in hand have changed since the last card was played.")
                    }
                    var hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.cardsList.last())
                        a.first == b.first || a.second == b.second
                    }
                    topCard = validOutput.cardsList.last()
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    cardsInHand.remove(topCard)
                    outputString = main.execute("$numOfCards").trim()
                    if (hasWon) {
                        whoWon = 0
                        pointsPlayer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsPlayer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Player wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong player wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }

                    validOutput = checkComputerOutput2(outputString, numOfCardsOnTable, topCard)
                    if (!validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.topCard)
                        (a.first == b.first) || (a.second == b.second)
                    }
                    topCard = validOutput.topCard
                    if ( deck.contains(topCard) )
                        return CheckResult(false, "Computer played card is a duplicate.")
                    deck.add(topCard)
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    outputString = outputString.substringAfter(topCard).trim()
                    if (hasWon) {
                        whoWon = 1
                        pointsComputer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsComputer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Computer wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong computer wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }
                }
            }

            position = if (numOfCardsOnTable == 0) checkOutput(outputString.lowercase(), 0, "No cards on the table".lowercase())
            else checkOutput(outputString.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output for number of cards or the top card.")
            if (whoWon == 0) {
                pointsPlayer += pointsOnTable
                numOfCardsPlayer += numOfCardsOnTable
            } else {
                pointsComputer += pointsOnTable
                numOfCardsComputer += numOfCardsOnTable
            }
            if (numOfCardsPlayer >= numOfCardsComputer) pointsPlayer += 3
            else pointsComputer += 3
            position = checkOutput(outputString.lowercase(), position,
                "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase(),
                "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun playSecondNormalExeTest3(): CheckResult {
            val deck = mutableListOf<String>()
            val cardsInHand = mutableListOf<String>()
            var pointsPlayer = 0
            var pointsComputer = 0
            var pointsOnTable = 0
            var numOfCardsPlayer = 0
            var numOfCardsComputer = 0
            var numOfCardsOnTable = 0
            var whoWon = 0

            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("no").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            deck.addAll(validOutput.cardsList)
            var topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            numOfCardsOnTable = 4
            pointsOnTable = countPoints(validOutput.cardsList)
            repeat(4) {
                for (numOfCards in 6 downTo 1) {
                    validOutput = checkComputerOutput2(outputString, numOfCardsOnTable, topCard)
                    if (!validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    var hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.topCard)
                        (a.first == b.first) || (a.second == b.second)
                    }
                    topCard = validOutput.topCard
                    if ( deck.contains(topCard) )
                        return CheckResult(false, "Computer played card is a duplicate.")
                    deck.add(topCard)
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    outputString = outputString.substringAfter(topCard).trim()
                    if (hasWon) {
                        whoWon = 1
                        pointsComputer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsComputer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Computer wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong computer wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }

                    validOutput = checkPlayerOutput2(outputString, numOfCards, numOfCardsOnTable, topCard)
                    if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    if (numOfCards == 6) {
                        cardsInHand.clear()
                        cardsInHand.addAll(validOutput.cardsList)
                        for (card in cardsInHand)
                            if ( deck.contains(card) )
                                return CheckResult(false, "Some cards in hand have already passed on table (Duplicates).")
                        deck.addAll(cardsInHand)
                    } else {
                        if ( !cardsInHand.containsAll(validOutput.cardsList) )
                            return CheckResult(false, "Cards in hand have changed since the last card was played.")
                    }
                    hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.cardsList.first())
                        a.first == b.first || a.second == b.second
                    }
                    topCard = validOutput.cardsList.first()
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    cardsInHand.remove(topCard)
                    outputString = main.execute("1").trim()
                    if (hasWon) {
                        whoWon = 0
                        pointsPlayer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsPlayer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Player wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong player wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }


                }
            }

            position = if (numOfCardsOnTable == 0) checkOutput(outputString.lowercase(), 0, "No cards on the table".lowercase())
            else checkOutput(outputString.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output for number of cards or the top card.")
            if (whoWon == 0) {
                pointsPlayer += pointsOnTable
                numOfCardsPlayer += numOfCardsOnTable
            } else {
                pointsComputer += pointsOnTable
                numOfCardsComputer += numOfCardsOnTable
            }
            if (numOfCardsPlayer > numOfCardsComputer) pointsPlayer += 3
            else pointsComputer += 3
            position = checkOutput(outputString.lowercase(), position,
                "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase(),
                "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun playSecondNormalExeTest4(): CheckResult {
            val deck = mutableListOf<String>()
            val cardsInHand = mutableListOf<String>()
            var pointsPlayer = 0
            var pointsComputer = 0
            var pointsOnTable = 0
            var numOfCardsPlayer = 0
            var numOfCardsComputer = 0
            var numOfCardsOnTable = 0
            var whoWon = 0

            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("no").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            deck.addAll(validOutput.cardsList)
            var topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            numOfCardsOnTable = 4
            pointsOnTable = countPoints(validOutput.cardsList)
            repeat(4) {
                for (numOfCards in 6 downTo 1) {
                    validOutput = checkComputerOutput2(outputString, numOfCardsOnTable, topCard)
                    if (!validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    var hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.topCard)
                        (a.first == b.first) || (a.second == b.second)
                    }
                    topCard = validOutput.topCard
                    if ( deck.contains(topCard) )
                        return CheckResult(false, "Computer played card is a duplicate.")
                    deck.add(topCard)
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    outputString = outputString.substringAfter(topCard).trim()
                    if (hasWon) {
                        whoWon = 1
                        pointsComputer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsComputer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Computer wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong computer wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }

                    validOutput = checkPlayerOutput2(outputString, numOfCards, numOfCardsOnTable, topCard)
                    if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    if (numOfCards == 6) {
                        cardsInHand.clear()
                        cardsInHand.addAll(validOutput.cardsList)
                        for (card in cardsInHand)
                            if ( deck.contains(card) )
                                return CheckResult(false, "Some cards in hand have already passed on table (Duplicates).")
                        deck.addAll(cardsInHand)
                    } else {
                        if ( !cardsInHand.containsAll(validOutput.cardsList) )
                            return CheckResult(false, "Cards in hand have changed since the last card was played.")
                    }
                    hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.cardsList.last())
                        a.first == b.first || a.second == b.second
                    }
                    topCard = validOutput.cardsList.last()
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    cardsInHand.remove(topCard)
                    outputString = main.execute("$numOfCards").trim()
                    if (hasWon) {
                        whoWon = 0
                        pointsPlayer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsPlayer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Player wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong player wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }
                }
            }

            position = if (numOfCardsOnTable == 0) checkOutput(outputString.lowercase(), 0, "No cards on the table".lowercase())
            else checkOutput(outputString.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output for number of cards or the top card.")
            if (whoWon == 0) {
                pointsPlayer += pointsOnTable
                numOfCardsPlayer += numOfCardsOnTable
            } else {
                pointsComputer += pointsOnTable
                numOfCardsComputer += numOfCardsOnTable
            }
            if (numOfCardsPlayer > numOfCardsComputer) pointsPlayer += 3
            else pointsComputer += 3
            position = checkOutput(outputString.lowercase(), position,
                "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase(),
                "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun playFirstWrongInputTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("Hello").trim()
            position = checkOutput(outputString.lowercase(), 0, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output after wrong input after the play first question.")

            outputString = main.execute("me").trim()
            position = checkOutput(outputString.lowercase(), 0, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output after wrong input after the play first question.")

            outputString = main.execute("0").trim()
            position = checkOutput(outputString.lowercase(), 0, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output after wrong input after the play first question.")

            outputString = main.execute("play").trim()
            position = checkOutput(outputString.lowercase(), 0, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output after wrong input after the play first question.")

            outputString = main.execute("yes").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            val topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            validOutput = checkPlayerOutput2(outputString, 6, 4, topCard)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)

            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.lowercase(), 0, "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong exit message.")

            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun wrongCardToPlayTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("yes").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            val topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            validOutput = checkPlayerOutput2(outputString, 6, 4, topCard)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)

            outputString = main.execute("0").trim()
            position = checkOutput(outputString.lowercase(), 0, "Choose a card to play (1-6):".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output, after input an invalid card number.")

            outputString = main.execute("7").trim()
            position = checkOutput(outputString.lowercase(), 0, "Choose a card to play (1-6):".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output, after input an invalid card number.")

            outputString = main.execute("One").trim()
            position = checkOutput(outputString.lowercase(), 0, "Choose a card to play (1-6):".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output, after input an invalid card number.")


            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.lowercase(), 0, "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong exit message.")

            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

    }

    fun checkOutput(outputString: String, searchPos: Int, vararg checkStr: String): Int {
        var searchPosition = searchPos
        for (str in checkStr) {
            val findPosition = outputString.indexOf(str, searchPosition)
            if (findPosition == -1) return -1
            if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return -1
            searchPosition = findPosition + str.length
        }
        return searchPosition
    }

    fun checkOIfValidCards2(cardsStr: String, numOfCards: Int): Boolean {
        val cards = cardsStr.split(" ")
        val cardRegex = "(A|[2-9]|10|J|Q|K)(♦|♥|♠|♣)".toRegex()
        for (card in cards) if (!card.matches(cardRegex)) {
            return false
        }
        return cards.size == numOfCards
    }

    fun checkIfUniqueCards(outputString: String): Boolean {
        val lines = outputString.lines()
        val cards = lines.first().trim().split(" ")
        return cards.distinct().size == cards.size
    }

    fun checkOIfValidCardsInHand(cardsStr: String, numOfCards: Int): Boolean {
        val cards = cardsStr.split(" ")
        val cardRegex = "([1-6])\\)(A|[2-9]|10|J|Q|K)(♦|♥|♠|♣)".toRegex()
        for (card in cards) if (!card.matches(cardRegex)) {
            return false
        }
        return cards.size == numOfCards
    }

    fun checkInitial(output: String): ErrorData {
        val position = checkOutput(output.lowercase(), 0, "Initial cards on the table:".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Wrong Initial cards message.")
        val cardsStr = output.substring(position).lines().map { it.trim() }.first { it != "" }
        if (cardsStr.isEmpty()) return ErrorData(false, "No initial cards are printed.")
        if ( !checkOIfValidCards2(cardsStr, 4) ) return ErrorData(false, "Invalid initial cards.")
        if ( !checkIfUniqueCards(cardsStr) ) return ErrorData(false, "Initial cards contain duplicate cards.")
        val cardsOnTable = cardsStr.trim().split(" ")
        val topCard = cardsOnTable.last()
        return ErrorData(true, "", topCard, cardsOnTable)
    }

    fun checkPlayerOutput2(output: String, numOfCards: Int, numOfCardsOnTable : Int, topCard: String): ErrorData {
        var position = if (numOfCardsOnTable == 0) checkOutput(output.lowercase(), 0, "No cards on the table".lowercase())
        else checkOutput(output.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Player turn: Wrong message for number of cards or the top card.")

        position = checkOutput(output.lowercase(), position, "Cards in hand:".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Wrong cards in hand message.")
        val cardsInHand = output.substring(position).lines().map { it.trim() }.firstOrNull() { it != "" }
            ?: return ErrorData(false, "Wrong cards in hand message.")
        if (!checkOIfValidCardsInHand(cardsInHand, numOfCards)) return ErrorData(false, "Wrong cards in hand message.")
        val listCardsInHand = cardsInHand.split(" ").map { it.substring(2) }
        var strCardsInHand = ""
        for (card in listCardsInHand) strCardsInHand += "$card "
        if ( !checkIfUniqueCards(strCardsInHand) ) return ErrorData(false, "Player's cards in hand contain duplicate cards.")
        val lastCard = listCardsInHand.last()
        position = output.indexOf(lastCard, position)
        position = checkOutput(output.lowercase(), position + lastCard.length, "Choose a card to play (1-$numOfCards):".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Wrong prompt to choose a card.")
        return ErrorData(true, "", cardsList = listCardsInHand)
    }

    fun checkComputerOutput2(output: String, numOfCardsOnTable : Int, topCard: String): ErrorData {
        var position = if (numOfCardsOnTable == 0) checkOutput(output.lowercase(), 0, "No cards on the table".lowercase())
        else checkOutput(output.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Computer turn: Wrong output for number of cards or the top card.")

        position = checkOutput(output.lowercase(), position, "Computer plays".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Wrong computer plays a card message.")

        val endIndex = output.indexOf("\n", position)
        if (endIndex < 0) return ErrorData(false, "Wrong output. Some lines are missing")
        val card = output.substring(position, endIndex).trim()
        if (!checkOIfValidCards2(card, 1)) return ErrorData(false, "Computer played an invalid card.")
        return ErrorData(true, "", card)
    }

    fun getRankSuit(card:String): Pair<String, String> {
        return if (card.length == 2) Pair(card.substring(0, 1), card.substring(1, 2))
        else Pair(card.substring(0, 2), card.substring(2, 3))
    }

    fun countPoints(cards: List<String>): Int {
        val ranks = listOf("A", "10", "J", "Q", "K")
        var count = 0
        for (card in cards) {
            val rank = if (card.length == 2) card.substring(0, 1)
            else card.substring(0, 2)
            if (rank in ranks) count++
        }
        return count
    }
  learner_created: false
- name: src/indigo/Util.kt
  visible: true
  text: |-
    package indigo

    object Util {
        private var sendToCheck = true

        fun ask(title: String): String {
            println(title)
            return readln().trim()
        }

        fun readln(): String {
            if (!sendToCheck) {
                print("> ")
            }
            return kotlin.io.readln()
        }

        fun disableToSend() { this.sendToCheck = false }
        fun enableToSend() { this.sendToCheck = true }
    }
  learner_created: true
- name: src/indigo/Cards.kt
  visible: true
  text: |-
    package indigo

    enum class Suits(val descSuit: String = "", private val symbol: String = "", val hex: String = "", val utf8: String = "", val dec: String = "") {
        SPADES("Spades", "♠", "&#x2660", "U+2660", "9824"),
        DIAMONDS("Diamonds", "♦", "&#x2666", "U+2666", "9830"),
        HEARTS("Hearts", "♥", "&#x2665", "U+2665", "9829"),
        CLUBS("Clubs", "♣", "&#x2663", "U+2663", "9827");

        override fun toString(): String {
            return symbol
        }
    }

    enum class Ranks(private val rank: String = "", val descRank: String = "", val value: Int = -1, val term: String = "") {
        ACE("A", "Ás", 1, "aces"),
        TWO("2", "Two", 2, "deuces"),
        THREE("3", "Three", 3, "treys"),
        FOUR("4", "Four", 4),
        FIVE("5", "Five", 5),
        SIX("6", "Six", 6),
        SEVEN("7", "Seven", 7),
        EIGHT("8", "Eight", 8),
        NINE("9", "Nine", 9),
        TEN("10", "Ten", 10),
        JACK("J", "Jack", 11),
        QUEEN("Q", "Queen", 12),
        KING("K", "King", 13);

        override fun toString(): String {
            return rank
        }
    }

    fun `take a deck`(): MutableList<Card> {
        val deck = mutableListOf<Card>()
        with(deck) {
            for (suit in Suits.values().reversed())
                for (rank in Ranks.values().reversed())
                    add(Card(rank, suit))
        }
        return deck
    }
  learner_created: true
- name: src/indigo/IndigoCardGame.kt
  visible: true
  text: |-
    package indigo

    import kotlin.random.Random

    const val NUMBER_OF_DECK_CARDS = 52
    const val NUMBER_OF_CARDS_TO_DEAL = 6
    const val MESSAGE_OF_CARDS_ON_THE_TABLE = "%d cards on the table, and the top card is %s"

    class IndigoCardGame {
        private var deck = `take a deck`()
        private var cardsOnTheTable: MutableList<Card> = mutableListOf()
        private var cardsOfHuman: MutableList<Card> = mutableListOf()
        private var cardsOfComputer: MutableList<Card> = mutableListOf()

        fun `reset, shuffle, get and exit`() = this.menu()

        fun `play indigo card game`() = this.startTheGame()

        private fun startTheGame() {
            var humanPlaying: Boolean? = null

            "Indigo Card Game".let(::println)

            var answer = ""
            while (humanPlaying == null) {
                when (answer.uppercase()) {
                    "YES" -> humanPlaying = true
                    "NO" -> humanPlaying = false
                    else -> answer = Util.ask("Play first?")
                }
            }

            shuffle()

            this.cardsOnTheTable.addAll(getCards("4"))
            "Initial cards on the table: "
                .let(::print)
                .also { showTheCards(this.cardsOnTheTable) }

            dealCards(this.cardsOfHuman)
            dealCards(this.cardsOfComputer)

            while (this.cardsOnTheTable.size != NUMBER_OF_DECK_CARDS) {
                humanPlaying = if (humanPlaying == true) {
                    "".let(::println).also { showCardOnTable() }

                    "Cards in hand: "
                        .let(::print)
                        .also { showTheCards(this.cardsOfHuman, true) }

                    var choice = ""
                    while (!correctChoice(choice))
                        choice = Util.ask("Choose a card to play (1-%d):"
                            .format(this.cardsOfHuman.size))

                    if (choice == "exit") {
                        exit()
                        return
                    }

                    val removeCard = choice.toInt() - 1
                    this.cardsOnTheTable.add(this.cardsOfHuman[removeCard])
                    this.cardsOfHuman.removeAt(removeCard)

                    false
                } else {
                    "".let(::println).also { showCardOnTable() }

                    val removeCard = Random.Default.nextInt(this.cardsOfComputer.size)

                    "Computer plays %s"
                        .format(this.cardsOfComputer[removeCard])
                        .let(::println)

                    this.cardsOnTheTable.add(this.cardsOfComputer[removeCard])
                    this.cardsOfComputer.removeAt(removeCard)

                    true
                }

                if (this.deck.size >= NUMBER_OF_CARDS_TO_DEAL) {
                    if (this.cardsOfHuman.isEmpty()) {
                        dealCards(this.cardsOfHuman)
                    }
                    if (this.cardsOfComputer.isEmpty()) {
                        dealCards(this.cardsOfComputer)
                    }
                }
            }

            "".let(::println).also { showCardOnTable() }
            exit()
        }

        private fun showCardOnTable() {
            MESSAGE_OF_CARDS_ON_THE_TABLE
                .format(this.cardsOnTheTable.size, this.cardsOnTheTable.last())
                .let(::println)
        }

        private fun correctChoice(choice: String): Boolean {
            if (choice == "exit") return true
            return choice in ("1"..this.cardsOfHuman.size.toString())
        }

        private fun dealCards(dealToWhom: MutableList<Card>) {
            dealToWhom.addAll(getCards(NUMBER_OF_CARDS_TO_DEAL.toString()))
        }

        private fun menu() {
            while (this.actionMenu()) {}
        }

        private fun actionMenu(): Boolean {
            when (Util.ask("Choose an action (reset, shuffle, get, exit):")) {
                "reset" -> reset()
                "shuffle" -> shuffle(true)
                "get" -> getCards(Util.ask("Number of cards:"))
                "exit" -> return exit()
                else -> "Wrong action.".let(::println)
            }
            return true
        }

        private fun reset() {
            deck = `take a deck`()
            "Card deck is reset.".let(::println)
        }

        private fun shuffle(printMessage: Boolean = false) {
            deck.shuffle()
            if (printMessage) "Card deck is shuffled.".let(::println)
        }

        private fun getCards(numOfCards: String, print: Boolean = false): MutableList<Card> {
            try {
                val nOfCards = numOfCards.toInt()
                if (nOfCards !in 1..52) {
                    "Invalid number of cards.".let(::println)
                } else if (deck.size < nOfCards) {
                    "The remaining cards are insufficient to meet the request.".let(::println)
                } else {
                    val takeCards = deck.take(nOfCards).toMutableList()
                    deck.removeAll(takeCards)
                    if (print)
                        showTheCards(takeCards)
                    return takeCards
                }
            } catch (_: IllegalArgumentException) {
                "Invalid number of cards.".let(::println)
            }
            return mutableListOf()
        }

        private fun showTheCards(cards: MutableList<Card> = deck, makeChoices: Boolean = false) {
            cards
                .mapIndexed { index: Int, card: Card ->
                    (if (makeChoices) "${index + 1})" else "")
                        .plus("$card")
                }
                .toMutableList()
                .joinToString(" ")
                .let(::println)
        }

        private fun exit(): Boolean {
            "Game Over".let(::println)
            return false
        }
    }
  learner_created: true
- name: src/indigo/Card.kt
  visible: true
  text: |
    package indigo

    data class Card(val rank: Ranks, val suit: Suits) {
        override fun toString(): String {
            return rank.toString() + suit.toString()
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16511#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 04 May 2023 03:28:16 UTC"
record: 3
